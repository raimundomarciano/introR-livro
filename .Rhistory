int dois = 2
int dois = 2
a = 4
str(a)
a = -3
str(a)
as.integer(a)
str(as.integer(a))
as.numeric(a)
str(as.numeric(a))
str(as.numeric(5.98))
str(as.numeric(-5.98))
as.double()
as.double(3)
str(as.double(3))
str(as.double(3.15))
str(as.numeric(3.15))
str(as.integer(3.15))
str(as.integer(3.99))
a = c
c
a
rm(a)
a = "c"
str(a)
a = "cccc"
a[1]
a[1][1]
a[1][1][1]
a[1][[1]]
texto1 = 'Ela disse: "Ok".'
texto2 = 'E eu respondi "Certo".'
print(c(texto1, texto2))
texto1 = 'Ela disse: "Ok".'
texto2 = 'E eu respondi "Certo".'
writeLines(c(texto1, texto2))
git add .
print(OR(TRUE, FALSE))
print(TRUE & FALSE))
print(TRUE & FALSE)
print(TRUE & FALSE)
print(TRUE | FALSE)
?Date
today <- Sys.Date()
print(today)
today <- Sys.Date()
print(today)
format(today, "%d %b %Y")
today <- Sys.Date()
print(today)
today <- format(today, "%d %m %Y")
today <- Sys.Date()
print(today)
today <- format(today, "%d %m %Y")
print(today)
today <- Sys.Date()
print(today)
today <- format(today, "%d/%m/%Y")
print(today)
today <- Sys.Date()
print(today)
today <- format(today, "%d/%m/%Y")
print(today)
today2 <- format(Sys.Date(), "%d/%m/%Y")
today <- Sys.Date()
print(today)
today <- format(today, "%d/%m/%Y")
print(today)
today2 <- format(Sys.Date(), "%d/%m/%Y")
print(today2)
dois_numero <- 2
dois_texto <- "dois"
dois_numero == dois_texto
a = c("1", 3)
a
str(a)
a = c("1", 3, TRUE)
str(a)
"5"
"5"+1
5+1
"5" + 1
?matrix
# Se a matriz dos inteiros de 1 a 6, dispostos em 3 linhas e 2 colunas, preenchida pela ordem das linhas.
mat = matrix(c(1:6), nrow = 3, ncol = 2, byrow = TRUE)
print(mat)
# Se a matriz dos inteiros de 1 a 6, dispostos em 3 linhas e 2 colunas, preenchida pela ordem das colunas
mat = matrix(c(1:6), nrow = 3, ncol = 2, byrow = FALSE)
print(mat)
vetorParaMatriz <- c("eu", "nasci", "há", "dez mil", "anos", "atrás")
mat = matrix(vetorParaMatriz, nrow = 3, ncol = 2, byrow = TRUE)
print(mat)
vetorFiliais <- c("Natal", "Parnamirim", "Macaíba")
vetorDistancias <- c(0, 10, 12, 10, 0, 2, 12, 2, 0)
mat = matrix(vetorDistancias, nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(vetorFiliais, vetorFiliais))
print(mat)
vetorFiliais <- c("Natal", "Parnamirim", "Macaíba")
vetorDistancias <- c(0, 10, 12, 10, 0, 2, 12, 2, 0)
mat = matrix(vetorDistancias, nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(vetorFiliais, vetorFiliais))
print(mat)
print(mat[1,1])
vetorFiliais <- c("Natal", "Parnamirim", "Macaíba")
vetorDistancias <- c(0, 10, 12, 10, 0, 2, 12, 2, 0)
mat = matrix(vetorDistancias, nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(vetorFiliais, vetorFiliais))
print(mat)
print(mat[1,2])
vetorFiliais <- c("Natal", "Parnamirim", "Macaíba")
vetorDistancias <- c(0, 10, 12, 10, 0, 2, 12, 2, 0)
mat = matrix(vetorDistancias, nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(vetorFiliais, vetorFiliais))
print(mat)
print(mat[1,2])
print(mat['Natal',])
vetorFiliais <- c("Natal", "Parnamirim", "Macaíba")
vetorDistancias <- c(0, 10, 12, 10, 0, 2, 12, 2, 0)
mat = matrix(vetorDistancias, nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(vetorFiliais, vetorFiliais))
print(mat)
x = 1
print(x)
y <- 1+1
y
texto = "Esse é um texto. Observe as aspas duplas"
assim = 'Também podem ser usadas aspas simples'
sugestao = 'Use aspas simples sempre que "possível" para delimitar a variável. Os
textos em português costumam usadas aspas duplas.'
print(sugestao)
writeLines(sugestao)
dois = 2
# se a variavel receber um número (integer)
dois <- 2
# e depois receber um texto
dois <- "dois"
# seu conteúdo e seu tipo estarão de acordo com a última atribuição
print(dois)
resultado <- 3000
#se o resultado for maior que zero
if (resultado > 0) {
# informe: "Tivemos Lucro!"
print("Tivemos Lucro!")
# caso contrário
} else {
# informe: "Deu ruim :( "
print("Deu ruim :(")
}
resultado <- 3000
if (resultado > 0) { print("Tivemos Lucro!") } else {print("Deu ruim :(")}
texto1 = 'Ela disse: "Ok".'
texto2 = 'E eu respondi "Certo".'
writeLines(c(texto1, texto2))
# AND ou E é representado por &
print(TRUE & FALSE)
# OR ou OU é representado por |
print(TRUE | FALSE)
dois_numero <- 2
dois_texto <- "dois"
# Vamos testar de o numero dois é o mesmo que o dois "por extenso"
dois_numero == dois_texto
# Vamos testar de o numero dois é diferente do dois "por extenso"
dois_numero != dois_texto
dois_numero <- 2
dois_texto <- "2"
# Vamos testar de o numero dois é o mesmo que o dois "caractere"
# O resultado é verdadeiro porque apesar dos tipos serem diferentes, o conteúdo é o mesmo.
dois_numero == dois_texto
today <- Sys.Date()
print(today)
today <- format(today, "%d/%m/%Y")
print(today)
today2 <- format(Sys.Date(), "%d/%m/%Y")
print(today2)
vetorNumerico = c(1,2,3,4,5)
vetorLogico = c(TRUE, TRUE, FALSE,FALSE)
vetorTextual = c("Eu", "Nasci", "há", "10.000", "anos", "atrás")
vetorNumTex = c(1,2,"três","4",5)
print(vetorNumTex)
# Se a matriz dos inteiros de 1 a 6, dispostos em 3 linhas e 2 colunas, preenchida pela ordem das linhas.
mat = matrix(c(1:6), nrow = 3, ncol = 2, byrow = TRUE)
print(mat)
# Se a matriz dos inteiros de 1 a 6, dispostos em 3 linhas e 2 colunas, preenchida pela ordem das colunas
mat = matrix(c(1:6), nrow = 3, ncol = 2, byrow = FALSE)
print(mat)
vetorParaMatriz <- c("eu", "nasci", "há", "dez mil", "anos", "atrás")
mat = matrix(vetorParaMatriz, nrow = 3, ncol = 2, byrow = TRUE)
print(mat)
print(mat['Natal', 'Parnamirim'])
print(mat["Natal", "Parnamirim"])
mat["Natal", "Parnamirim"]
mat["Natal", "Parnamirim"]
mat["Natal", ]
mat = matrix(vetorDistancias, nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(vetorFiliais, vetorFiliais))
mat
mat["Natal", ]
mat["Natal", "Parnamirim"]
mat["Natal", "Parnamirim"]
mat = matrix(vetorDistancias, nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(vetorFiliais, vetorFiliais))
vetorFiliais <- c("Natal", "Parnamirim", "Macaíba")
vetorDistancias <- c(0, 10, 12, 10, 0, 2, 12, 2, 0)
mat = matrix(vetorDistancias, nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(vetorFiliais, vetorFiliais))
print(mat)
mat["Natal", "Parnamirim"]
?data.frame
clientes <- data.frame(empresa = c("a", "b"), cnpj = c("1","2"))
clientes <- data.frame(empresa = c("a", "b"), cnpj = c("1","2"))
clientes
clientes <- data.frame(empresa = c("a", "b"), cnpj = c("1","2"),
empregados = c(10,20), encerramento = c(TRUE, FALSE))
clientes
clientes <- data.frame(empresa = c("Marte S.A.", "Deimos S.A.", "Phobos S.A."), cnpj = c("00.000.001/0001-00","00.000.011/0001-10", "99.000.001/0001-55"),
empregados = c(10,20, 25), encerramento = c(FALSE, FALSE, TRUE))
clientes
clientes[1,]
# para a lista dos CNPJs:
clientes[,2]
clientes$cnpj
clientes[,"cnpj"]
clientes <- data.frame(empresa = c("Marte S.A.", "Deimos S.A.", "Phobos S.A."),
cnpj = c("00.000.001/0001-00","00.000.011/0001-10", "99.000.001/0001-55"),
empregados = c(10,20, 25),
encerramento = c(FALSE, FALSE, TRUE),
stringsAsFactors = FALSE)
clientes
clientes[1,]
# para gerar uma relação com os CNPJs:
clientes[,2]
clientes[,"cnpj"]
clientes$cnpj
clientes$cnpj[3]
clientes$cnpj[2:3]
c = (1:5)
?filter
?Filter
library(dplyr)
?install_github
?install.github
1+1
1-1
1*1
1/1
1^1
1+1
a,b = 5, 2
mean(5,2)
mean(c(5,2))
# Sejam a = 5 e b = 2 e vetorNum um vetor de números inteiros
a = 5
b = 2
v = c(1,2,3,4,5)
v[1] + v[2] # soma
v[1] - v[2] # subtração
v[1] * v[2] # multiplicação (asterisco)
v[1] / v[2] # divisão
v[1] ^ v[2] # potenciação (acento circunflexo)
sum(v) # soma
sum(v) # soma de todos os elementos de v
sum(v[1:4]) # soma dos quatro primeiros elementos de v
sum(v[3:5]) # soma dos três últimos elementos de v
product(1)
