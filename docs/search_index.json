[["variáveis.html", "3 Variáveis 3.1 Numéricas 3.2 Textuais 3.3 Lógicas 3.4 Datas 3.5 R x outras linguagens", " 3 Variáveis Os dados podem ser importados (trazidos de um arquivo para o R) ou digitados no próprio console. Quando você deseja armazenar um valor na memória, você deve atribuí-lo, usando o sinal = ou &lt;-. x = 1 print(x) ## [1] 1 y &lt;- 1+1 y ## [1] 2 texto = &quot;Esse é um texto. Observe as aspas duplas&quot; assim = &#39;Também podem ser usadas aspas simples&#39; sugestao = &#39;Use aspas simples sempre que &quot;possível&quot; para delimitar a variável. Os textos em português costumam usadas aspas duplas.&#39; print(sugestao) ## [1] &quot;Use aspas simples sempre que \\&quot;possível\\&quot; para delimitar a variável. Os \\ntextos em português costumam usadas aspas duplas.&quot; writeLines(sugestao) ## Use aspas simples sempre que &quot;possível&quot; para delimitar a variável. Os ## textos em português costumam usadas aspas duplas. 3.1 Numéricas numero1 = 1 class(numero1) ## [1] &quot;numeric&quot; typeof(numero1) ## [1] &quot;double&quot; numero2 = 2L class(numero2) ## [1] &quot;integer&quot; typeof(numero2) ## [1] &quot;integer&quot; O R não usa a formatação brasileira de números. No sistema adotado, devemos separar decimais por ponto, não por vírgulas. Por isso, o correto é 0.5 ao invés de 1,5. numero3 = 1.5 numero4 = 1.5 * 2 print(numero3) ## [1] 1.5 print(numero4) ## [1] 3 Operações matemáticas com objetos numéricos serão apresentadas na seção Funções numéricas básicas. 3.2 Textuais Para inserir um caractere, uma palavra ou uma frase, é necessário o uso de aspas simples ou duplas. Como no português é comum o uso de aspas duplas, é interessante o uso de aspas simples no R. Isso se deve ao fato de que se você precisar eventualmente incluir as aspas duplas, elas podem ficar dentro das aspas simples. Por exemplo, é aceitável: texto1 = &#39;Ela disse: &quot;Ok&quot;.&#39; texto2 = &#39;E eu respondi: &quot;Certo&quot;.&#39; writeLines(c(texto1, texto2)) ## Ela disse: &quot;Ok&quot;. ## E eu respondi: &quot;Certo&quot;. Perceba que as aspas simples estão funcionando apenas como delimitadores. Estão dizendo que tudo que está dentro delas faz parte de um mesmo texto, inclusive as aspas duplas. texto3 &lt;- &quot;Ela disse: &quot;Ok&quot;.&quot; O texto3 seria problemático para o R. Assim que ele identifica as primeiras aspas, ele passa a esperar um texto. Quando aparecem mais aspas, ele entende que o texto foi encerrado e não pretende continuar lendo o que vem depois. Com isso, ele estranha que tenha mais texto logo após (Ok.) 3.2.1 Numérica ou textual? O CNPJ de uma empresa é composto por 14 dígitos numéricos (0 a 9), separados por alguns marcadores (pontos, barras e traços). Por exemplo, pode ser 12.345.678/0001-19. Para guardar essa informação como uma variável numérica, você precisaria omitir as marcações, digitando 12345678000119. Entretanto, existe aqui um problema: o caso dos CNPJs iniciados por 0. Se há um 0 no início do número, ele é sempre ignorado. Por exemplo, 02 sempre será salvo na memória como 2, porque o zero à esquerda, na Matemática, não tem função. Pensando nisso, pode ser mais interessante salvar o CNPJ como uma variável textual. cnpj &lt;- &quot;12.345.678/0001-19&quot; Com isso não são perdidos os marcadores. Perceba, por fim, que o tratamento desse número como texto não tem implicações sobre a análise estatística dos dados. O CNPJ não é um número sobre o qual você realiza operações matemáticas. Você não calcula a média,a moda ou a mediana dos CNPJs e nem cria um gráfico de CNPJs. Ele é um identificador da empresa, tal qual o nome dela. No caso de pessoas físicas, o mesmo raciocínio vale para o CPF. Exceção: os dois últimos dígitos do CNPJ (e do CPF) são um código verificador. Alguns formulários cadastrais usam esses dois últimos dígitos para conferir se o campo foi preenchido corretamente. Essa conferência é feita a partir de um cálculo matemático; logo, há casos específicos em que mesmo o CNPJ pode ser usado para algum cálculo. 3.3 Lógicas Em muitos casos, é importante ter variáveis que indiquem TRUE (Verdadeiro) ou FALSE (Falso). Por exemplo, podemos querer verificar se cada entidade possui determinada característica (digamos, seu endividamento de curto prazo é menor que o Ativo Circulante); se a empresa tiver essa característica, receberá o valor TRUE; caso contrário, FALSE. O tipo de variável que admite apenas esses dois valores lógicos é chamado de Booleana (boolean ou bool). Nos estudos sobre lógica, frequentemente nos deparamos com Tabelas de Verdade e alguns operadores lógicos, dentre os quais os mais comuns são o AND (e) e o OR (ou). É preciso um pouco de atenção para usá-los corretamente. Se dizemos que estamos precisando de um relatório que contenha apenas as empresas que tiveram lucros no ano passado (2020) e que abriram capital nos últimos cinco anos (2016-2020), estamos exigindo que as empresas necessariamente atendam aos dois requisitos; ou seja, o relatório só deve conter as empresas que, além de terem aberto o capital entre 2016 e 2020, também apresentaram, em seus demonstrativos financeiros de 2020, um resultado contábil positivo. Com o uso do operador AND (e), não basta uma característica, é necessário que atenda as duas. Se tivéssemos dito que queríamos um relatório com empresas que têm Patrimônio Líquido Negativo ou que estão em Recuperação Judicial, precisaríamos pegar todas as empresas que atendem a qualquer um dos critérios (inclusive as que atendem a ambos os critérios). Assim, se a empresa tem PL negativo, mas não está em recuperação judicial, ela deve constar no relatório. Se ela está em recuperação judicial, mas não tem PL negativo, ela deve constar no relatório. Se ela tem PL negativo e está em recuperação judicial, ela também deve estar no relatório. A única situação em que ela deve ser deixada de fora é caso ela tenha PL maior ou igual a zero e não esteja em recuperação judicial. No R, o operador AND é representado por &amp; (e comercial), enquanto o OR é representado por | (uma barra vertical). # AND ou E é representado por &amp; print(TRUE &amp; FALSE) ## [1] FALSE # OR ou OU é representado por | print(TRUE | FALSE) ## [1] TRUE Além disso, é possível realizar a negação de um valor lógico. Dizer que algo não é verdadeiro equivale a dizer que é falso. Dizer que algo não é falso equivale a dizer que algo é verdadeiro. No R, a negação é representada por um ! (ponto de exclamação). # AND ou E é representado por &amp; 2 &lt; 5 ## [1] TRUE # OR ou OU é representado por | !(2 &lt; 5) ## [1] FALSE Sabemos que 2 é menor que 5. Por isso, a expressão 2 &lt; 5 retorna um valor TRUE (verdadeiro). Quando adicionamos o operador de negação (!), estamos pedindo para que o R retorne não verdadeiro, o que equivale a Falso. Variáveis lógicas podem ter muitos usos, como parâmetros em funções ou filtros para listas de dados. Por exemplo, você pode querer que o usuário informe se ele quer imprimir o relatório dos valores ao final. Nesse caso, ele deveria informar que o valor do parâmetro imprimir_relatorio deveria ser TRUE. Caso ele não queira imprimir o relatório, deveria informar imprimir_relatorio como FALSE. Também podem ser usados para comparações de igualdade (==) ou desigualdade (!=). dois_numero &lt;- 2 dois_texto &lt;- &quot;dois&quot; # Vamos testar de o numero dois é o mesmo que o dois &quot;por extenso&quot; dois_numero == dois_texto ## [1] FALSE # Vamos testar de o numero dois é diferente do dois &quot;por extenso&quot; dois_numero != dois_texto ## [1] TRUE O R não entende que dois é a forma por extenso do número 2. Para o R, há um número 2 e há uma palavra, cujo significado o R desconhece. Então, na comparação entre esse inteiro e essa string, o R entende que há uma diferença (de tipos). Por isso, ele afirma que são diferentes (ou não iguais). dois_numero &lt;- 2 dois_texto &lt;- &quot;2&quot; # Vamos testar de o numero dois é o mesmo que o dois &quot;caractere&quot; # O resultado é verdadeiro porque apesar dos tipos serem diferentes, o conteúdo é o mesmo. dois_numero == dois_texto ## [1] TRUE Existe outro operador de igualdade (===), mas que não será tratado agora. 3.4 Datas today &lt;- Sys.Date() print(today) ## [1] &quot;2022-03-20&quot; today &lt;- format(today, &quot;%d/%m/%Y&quot;) print(today) ## [1] &quot;20/03/2022&quot; today2 &lt;- format(Sys.Date(), &quot;%d/%m/%Y&quot;) print(today2) ## [1] &quot;20/03/2022&quot; 3.5 R x outras linguagens O R é uma linguagem que automaticamente reconhece o tipo do dado que foi inserido. Por uma questão de comparação, se você estivesse usando uma linguagem tipada, como o C++, você precisaria declarar explicitamente o tipo da variável que está sendo criada. Assim, seria um erro você criar uma variável usando dois = 2 O C++ não entende o que você está querendo dizer com isso. Você precisaria informar que existe uma variável do tipo integer (simplesmente int) chamada dois e cujo valor é o número inteiro 2. Outra particularidade do R é que as linhas de código não precisam ser finalizadas com um ponto-e-vírgula (;), como acontece no C++. int dois = 2; Além disso, as variáveis em R são mutáveis, inclusive quanto ao tipo. Isso quer dizer que uma vez definidas (ou atribuídas), podem ter seus valores e tipo modificados. Assim, uma variável que antes tinha um número, pode passar a ter um texto ou um booleano. # se a variavel receber um número (integer) dois &lt;- 2 # e depois receber um texto dois &lt;- &quot;dois&quot; # seu conteúdo e seu tipo estarão de acordo com a última atribuição print(dois) ## [1] &quot;dois&quot; Por fim, para o R a indentação não é relevante. Há linguagens de programação em que a posição relativa das linhas de código é essencial para determinar se elas fazem parte de um bloco ou não. No R, os blocos são definidos com o uso de chaves ({ }). Ainda iremos explorar com detalhes o uso das condicionais, mas podemos ilustrar o seguinte caso: se o resultado for maior que zero, então, sim, tivemos lucro; caso contrário, não tivemos. resultado &lt;- 3000 #se o resultado for maior que zero if (resultado &gt; 0) { # informe: &quot;Tivemos Lucro!&quot; print(&quot;Tivemos Lucro!&quot;) # caso contrário } else { # informe: &quot;Deu ruim :( &quot; print(&quot;Deu ruim :(&quot;) } ## [1] &quot;Tivemos Lucro!&quot; No R, esse alinhamento é apenas um facilitador de leitura do código. Se o código estiver organizado, as pessoas terão mais facilidade em entendê-lo. O código a seguir tem exatamente a mesma funcionalidade. resultado &lt;- 3000 if (resultado &gt; 0) { print(&quot;Tivemos Lucro!&quot;) } else {print(&quot;Deu ruim :(&quot;)} ## [1] &quot;Tivemos Lucro!&quot; Embora seja verdade que o espaço ocupado está menor, quando o código começa a adquirir um alto grau de complexidade, torna-se muito desejável que ele esteja melhor organizado e, preferencialmente, comentado. No Python, onde a identação faz diferença, o código precisaria seguir uma estrutura baseada em espaços, sendo desnecessário o uso das chaves. #se o resultado for maior que zero if (resultado &gt; 0): # informe: &quot;Tivemos Lucro!&quot; print(&quot;Tivemos Lucro!&quot;) else: # informe: &quot;Deu ruim :( &quot; print(&quot;Deu ruim :(&quot;) No Python, portanto, o que importa para definir que o print(Tivemos Lucro!) está associado ao if(resultado &gt; 0) é o fato de não haver nenhum espaço entre a margem da página e o if; e o fato de haver quatro espaços entre a margem da página e o print. Isso faz com que esse print esteja subordinado ao if; assim como, o segundo print (que também está mais recuado) é subordinado ao else (que não tem recuo). "]]
